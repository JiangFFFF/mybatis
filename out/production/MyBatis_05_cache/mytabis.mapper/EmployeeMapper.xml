<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!--namespace：名称空间,指定为接口的全类名-->
<mapper namespace="com.jiang.mybatis.dao.EmployeeMapper">
  <!--
      eviction:缓存的回收策略：FIFO
      flushInterval:缓存刷新间隔，缓存多长时间清空一次，默认不清空，可以设置毫秒值
      readOnly：缓存是否只读
                true：只读：mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据
                          mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给客户,不安全，速度快
                false（默认）：非只读：mybatis觉得获取的数据可能会被修改
                      mybatis会利用序列化&反序列化的技术克隆一份新的数据给你 安全，速度慢
      size:缓存存放多少元素
      type:指定自定义缓存的全类名,实现Cache接口即可
  -->
<!--  <cache eviction="FIFO" flushInterval="6000" readOnly="false" size="1024" ></cache>-->



  <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>




<!--id：唯一标识
resultType：返回值类型
#{id}:从传递过来的参数中取出id值
 -->
 
  <select id="getEmployeeId" resultType="com.jiang.mybatis.bean.Employee">
    select * from tbl_employee where id = #{id}
  </select>

<!--  <select id="getEmployeeId" resultMap="com.jiang.mybatis.bean.Employee"-->
<!--          databaseId="oracle">-->
<!--    select * from tbl_employee where id = #{id}-->
<!--  </select>-->

  <!--parameterType可以省略
    mysql支持自增主键，自增主键的获取，mybatis也是利用statment.getGenreatedKeys()；
    useGeneratedKeys=true:使用自增主键获取主键值策略
    keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
  -->
  <insert id="addEmp" parameterType="com.jiang.mybatis.bean.Employee"
  useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
    insert into tbl_employee(last_name,email,gender)
    values(#{lastName},#{email},#{gender})
  </insert>


  <!--
    Oracle不支持自增，Oracle使用序列来模拟自增
    每次插入的数据的主键是从序列中拿到的值;如何获取这个值
  -->
  <insert id="addEmp" databaseId="oracle">
    <!--插入时的主键是从序列中拿到的-->
    <!--keyProperty：查出来的主键赋值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
        resultType:查出的数据的返回值类型
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
    <!--<selectKey keyProperty="id" order="AFTER" resultType="Integer">-->
      <!--编写查询主键的sql语句-->
        select EMPLOYEE_SEQ.nextval from dual
--         select EMPLOYEE_SEQ.currval from dual
    </selectKey>
    insert into tbl_employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
    values(#{id},#{lastName},#{email})
--     values(EMPLOYEE_SEQ.nextval,#{lastName},#{email})
  </insert>



  <update id="updateEmp">
    update tbl_employee
    set last_name=#{lastName},email=#{email},gender=#{gender}
    where id=#{id}
  </update>

  <delete id="deleteEmpById">
    delete from tbl_employee
    where id=#{id}
  </delete>

  <select id="getEmpByIdAndLastName" resultType="com.jiang.mybatis.bean.Employee">
    select *
    from tbl_employee
    where id=#{id} and last_name=#{lastName}
  </select>

  <select id="getEmpMap" resultType="com.jiang.mybatis.bean.Employee">
    select *
    from tbl_employee
    where id=#{id} and last_name=#{lastName}
  </select>

  <!--resultType：如果返回的是一个集合，要写集合中元素的类型,把这条记录封装成什么类型-->
  <select id="getEmpsByLastNameLike" resultType="com.jiang.mybatis.bean.Employee">
    select * from tbl_employee where last_name like #{lastName}
  </select>

  <select id="getEmpByIdReturnMap" resultType="map">
    select * from tbl_employee where id=#{id}
  </select>

  <select id="getEmpByLastNameLikeReturnMap" resultType="com.jiang.mybatis.bean.Employee">
    select * from tbl_employee where last_name like #{lastName}
  </select>
  
  
</mapper>